@1.	Goal -> Source EOF
@2.	Source -> ClassDeclarations MainClass
@3.	MainClass -> public #set_declaration class #put_in_current_table #make_symbol_table Identifier #reset_declaration { #scope_in public static void main ( ) { VarDeclarations Statements } #scope_out }
%4.	ClassDeclarations -> ClassDeclaration ClassDeclarations
%4.	ClassDeclarations -> ϵ
%5.	ClassDeclaration -> class #set_declaration #put_in_current_table #make_symbol_table Identifier Extension #reset_declaration { #scope_in FieldDeclarations MethodDeclarations #scope_out }
%6.	Extension -> extends #set_parent Identifier
%6.	Extension -> ϵ
%7.	FieldDeclarations -> FieldDeclaration FieldDeclarations
%7.	FieldDeclarations -> ϵ
%8.	FieldDeclaration -> static #set_declaration #push Type #set_type_address Identifier #reset_declaration ;
@9.	VarDeclarations -> VarDeclaration VarDeclarations
@9.	VarDeclarations -> ϵ
@10.	VarDeclaration -> #set_declaration #push Type #set_type_address Identifier #reset_declaration ;
%11.	MethodDeclarations -> MethodDeclaration MethodDeclarations
%11.	MethodDeclarations -> ϵ
%12.	MethodDeclaration -> public static #push Type #put_in_current_table #make_symbol_table #set_parent #push Identifier #scope_in ( Parameters ) { VarDeclarations Statements return GenExpression ; #scope_out }
%13.	Parameters -> #set_declaration #push Type #set_function_in_parent #set_type_address Identifier #reset_declaration Parameter
%13.	Parameters -> ϵ
%14.	Parameter -> , #set_declaration #push Type #set_function_in_parent #set_type_address Identifier #reset_declaration Parameter
%14.	Parameter -> ϵ
@15.	Type -> boolean
@15.	Type -> int
@16.	Statements -> Statement Statements
@16.	Statements -> ϵ
%17.	Statement -> { Statements }
@17.	Statement -> if ( GenExpression ) #save Statement #save #jpf else Statement #fill
%17.	Statement -> while ( #push_line GenExpression ) #save Statement #while
%17.	Statement -> for ( #pid Identifier = Integer #assign ; #push_line Expression RelTerm1 ; #pid Identifier += Integer ) #save Statement #step_for
@17.	Statement -> #pid Identifier = GenExpression #assign ;
%17.	Statement -> System . out . println ( GenExpression #print ) ;
@18.	GenExpression -> Expression GenExpression1
%19.	GenExpression1 -> RelTerm1 RelExpression1
@19.	GenExpression1 -> ϵ
@20.	Expression -> Term Expression2
@21.	Expression2 -> Expression1 Expression2
@21.	Expression2 -> ϵ
@22.	Expression1 -> + Term #add
@22.	Expression1 -> - Term #sub
@23.	Term -> Factor Term1
%24.	Term1 -> * Factor #mult Term1
@24.	Term1 -> ϵ
%25.	Factor -> ( Expression )
@25.	Factor -> #pid Identifier Factor1
@25.	Factor -> #push_bool true
@25.	Factor -> #push_bool false
@25.	Factor -> Integer
%26.	Factor1 -> #push_scope . #push Identifier Factor2
@26.	Factor1 -> ϵ
%27.	Factor2 -> ( #set_counter Arguments ) #pop_counter #push_return_value_address
@27.	Factor2 -> ϵ
28.	RelExpression1 -> && Expression #and RelTerm1 RelExpression1
28.	RelExpression1 -> ϵ
29.	RelTerm1 -> == Expression #equal
29.	RelTerm1 -> < Expression #less_than
30.	Arguments -> GenExpression #get_parameter_address #assign #inc_counter Argument
30.	Arguments -> ϵ
31.	Argument -> , GenExpression Argument
31.	Argument -> ϵ
@32.	Identifier -> identifier
@33.	Integer -> #push_number integer